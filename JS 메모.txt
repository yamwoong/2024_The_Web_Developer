함수

1.	대문자 변경 : toUpperCase()

2.	배열 추가 : Array.push(), Array.unshift(), Array.splice()

3.	배열 삭제 : Array.pop(), Array.shift(), Array.splice()

4.      객체 키, 값 가져오기 : Object.keys(), Object.values()

5.	부모함수 안에 있는 내부함수를 쓰려면 안에 있는 내부함수를 부모함수 안에서 호출해줘야 사용할 수 있다
==============================================================================

객체 => const 객체 = {, , , ,}
1.	키 값이 한쌍
2.	블리안, 숫자, 스트링, 배열, null, undeifind, 객체 등등.. 값으로 가질 수 있다
3.	배열안에 객체 생성 가능
==============================================================================

null

1.	빈 배열 length 값 0 if(arr.length === 0) return null;

==============================================================================

forEach

1.	arr.forEach()로 쓰고 보통 () <= 여기 안에 익명함수를 넣어서 작성한다.

==============================================================================

map

1.	const num = arr.map()로 쓰고 보통 () <= 여기 안에 익명함수를 넣어서 작성한다. map은 새로운 배열을 생성한다

==============================================================================

화살표 함수

1.	const add = (x, y) => {return} 이런식으로 함수를 작성한다.
2.	const add = (x, y) => () 이런식으로 {} 대신 ()를 사용하면 return 없이 반환한다. 대신 딱 하나의 표현식만 사용할 수 있다 두개 이상일 경우 오류가 난다

==============================================================================

setTimeout()

1.	시간지연으로 사용 setTimeout(함수, 시간mm단위) 3000이면 3초

==============================================================================

setInterval(),	clearInterval()

1.	setInterval() : 일정시간마다 반복 / 	clearInterval() : setInterval() 종료

2.	const id = setInterval(Math.random(), 시간) 이런식으로 사용

3.	종료 방법 	clearInterval(id) 넣으면 된다 setInterval() 마다 다 다른 id를 가지고 있어 여려개를 사용하고 각자 종료할 수 있다.

==============================================================================

filter()

1.	const movie = movies.filter(m => m.score > 80)로 사용 () 안에 조건 넣을 수 있음

2. 	const movie = movies.filter(m => m.score > 80).map(m => m.title) 이런식으로 map등 과 같이 사용 할 수 있음

3.	const validUserNames = usernames => usernames.filter(usr => usr.length < 10);

==============================================================================

some / every

1.	true / false를 반환 테스트를 하는 방법

2.	every 배열 평가가 전부 true이면 true 하나라도 false면 false반환

3.	exams.every(score => score >= 75) 이런식으로 사용
	const allEvens = arr => arr.every(num => num % 2 === 0);

4.	some 배열뱅가 중 하나라도 true인지 확인

5.	exams.some(score => score >= 75) 이런식으로 사용 여기서 하나라도 조건을 만족하면 true를 반환


==============================================================================

reduce

1.	const total = prices.reduce((total, price) => total + price)

2.	const highestRated = movies.reduce((bestMovie, currMovie) => {
    if (currMovie.score > bestMovie.score) {
        return currMovie;
    }
    return bestMovie;
})

3.	마지막에 하나의 값만 남는다

4.	evens.reduce((sum, num) => sum + num) //20
	evens.reduce((sum, num) => sum + num, 100) //120  이런식으로 초기값을 지정할 수 있다

    